此前对于AOP的使用仅限于声明式事务，除此之外在实际开发中也没有遇到过与之相关的问题

对部分函数的调用进行日志记录，用于观察特定问题在运行过程中的函数调用情况
监控部分重要函数，若抛出指定的异常，需要以短信或邮件方式通知相关人员
金控部分重要函数的执行时间


提供声明式事务

自定义切面

1、术语：

切面(aspect)：用来切业务方法的类。

连接点(joinpoint)：是切面类和业务类的连接点，其实就是在通知方法中的参数。

通知(advice)：在切面类中，声明对业务方法做额外处理的方法。

切入点(pointcut)：业务类中指定的方法，作为切面切入的点。其实就是指定某个方法作为切面切的地方。

引入(introduction)：

目标对象(target object)：被代理对象

AOP代理(aop proxy)：代理对象

织入(weaving)：

2、通知类型：

前置通知(before advice)：在连接点之前执行

后置通知(after returning advice)：在连接点执行完成后，执行通知

异常通知(after throwing advice)：在连接点抛出异常后，执行通知

最终通知(after (finally) advice)：在连接点退出后（包括执行完成和抛出异常），执行通知

环绕通知(around advice)：包围连接点，调用方法前后完成自定义行为

3、spring仅支持使用方法调用作为 join point


4、AspectJ支持：

	
